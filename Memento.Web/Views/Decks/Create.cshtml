@model Memento.DomainModel.Models.Deck

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Deck</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="col-md-offset-2" id="ControlMode">
            <div>
                <div class="radio">
                    <label>
                        @Html.RadioButtonFor(model => model.ControlMode, "Automatic", new { id = "AutoMode" }) Automatic
                    </label>
                </div>
                <div class="radio">
                    <label>
                        @Html.RadioButtonFor(model => model.ControlMode, "Manual", new { id = "ManualMode" }) Manual
                    </label>
                </div>
            </div>
        </div>

        <hr />

        <div class="col-md-offset-2" id="DelayMode">
            <div class="radio">
                <label>
                    @Html.RadioButtonFor(model => model.DelayMode, "Smooth", new { id = "SmoothMode" }) Smooth
                </label>
            </div>
            <div class="radio">
                <label>
                    @Html.RadioButtonFor(model => model.DelayMode, "Sharp", new { id = "SharpMode" }) Sharp
                </label>
            </div>
            <div id="Combined" class="radio disabled">
                <label>
                    @Html.RadioButtonFor(model => model.DelayMode, "Combined", new { id = "CombinedMode", disabled = "disabled" }) Combined
                </label>
            </div>
        </div>

        <hr />

        <div id="SRSDeckParams">
            <div class="form-group">
                @Html.LabelFor(model => model.StartDelay, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDelay, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDelay, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Coeff, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Coeff, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Coeff, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/App/DeckCreate.js"></script>
}
